class Solution {
    public boolean canSplitArray(List<Integer> nums, int m) {
        int dp[][] = new int[nums.size()][nums.size()];
        for (int[] arr:dp) Arrays.fill(arr,-1);
        int sum=0;
        for (int i=0; i<nums.size(); i++) sum += nums.get(i);

        return checker(nums, 0, nums.size()-1, sum, m, dp);
        
    }

    boolean checker(List<Integer> nums, int start, int end, int totalSum, int m, int[][] dp) {
        if (end - start <= 1) return true; 

        if(dp[start][end] != -1) return dp[start][end] == 1 ? true : false;

        int suffixSum = 0;
        int prefixSum = 0;

        for (int i=start; i<end; i++) {
            prefixSum += nums.get(i);
            suffixSum = totalSum - prefixSum;

            if ((prefixSum == nums.get(start) || prefixSum >= m) && 
            (suffixSum == nums.get(end) || suffixSum >= m)) {
                boolean left = checker(nums, start, i, prefixSum, m, dp);
                boolean right = checker(nums, i+1, end, suffixSum, m, dp);
            

                if (left && right) {
                    dp[start][end] = 1; 
                    return true;
                }
            }
        }
        dp[start][end] = 0;
        return false;
    }
}
